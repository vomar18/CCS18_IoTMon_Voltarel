input:
    all Official Samsung Smartapp descriptions
    list of POS accepted
    similarity percentage level (description and channel centroids)
    pre-trained word2vec model     /* for calculate the similarity between words*/
output:
    physical channel identified cluster with correlated keywords (table 1)

foreach app_description do 
    /* apply Stanford NLP and extrapolate the NN and NNS */
    foreach extrapolated_word do
        if word2vect accept word
            keywords <-- {exstrapolated_word}

    if keywords == 0
        /* no keywords found inside app description */
    elif keywords == 1
        set_of_keywords <-- {keywords} 
    elif keywords == 2
        set_of_keywords <-- {couple of keywords} 
    else 
        similarity_matrix[keywords, keywords] <-- 1
        foreach keywords
            foreach keywords
                similarity_matrix[keywords, keywords] <-- similarity between words
                if similarity between words >= percentage level description
                    set_of_keywords <-- {couple of words}

/* now process all the most similar NN and NNS */
channel_matrix[set_of_keywords, set_of_keywords] <- 0
foreach word in set_of_keywords
    foreach word in set_of_keywords
        channel_matrix[keywords, keywords] <-- similarity between words

/* now extrapolate only the most similar keywords between similar NN and NNS */
foreach word in set_of_keywords:
    channel[set_of_keywords] <-- []    /* creation of an empty dictionary */

foreach word in set_of_keywords
    foreach word in set_of_keywords
        if similarity between words >= percentage level centroids
            channel[word] <-- {pair of words}

/* save only the channel with the most correlated keywords */
